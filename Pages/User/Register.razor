@page "/user/register"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Login</label>
                <InputText @bind-Value="model.Login" class="form-control" />
                <ValidationMessage For="@(() => model.Login)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" class="password" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>Email Adress</label>
                <InputText @bind-Value="model.Email" type="form-control" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            <NavLink href="account/login" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private Models.Client.AddClient model = new Models.Client.AddClient();
    private bool loading;

    private async void OnValidSubmit()
    {

        loading = true;
        try
        {
            await AccountService.Register(model);
            NavigationManager.NavigateTo("user/login");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
