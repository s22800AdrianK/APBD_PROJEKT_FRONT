@page "/user/watchList";
@namespace ProjektFront.Pages
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IStockService StockService

<table>
    <thead>
        <tr>
            <th @onclick="@(()=>Sort("branding"))">
                Logo
            </th>
            <th @onclick="@(()=>Sort("name"))">
                Ticker
            </th>
            <th @onclick="@(()=>Sort("ticker"))">
                Name
            </th>
            <th @onclick="@(()=>Sort("locale"))">
                Locale
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var com in companies)
        {
            <tr>
                <td @onclick="@(()=>NavigationManager.NavigateTo($"stock/{com.ticker}"))"><img alt="@(com.name)" src="@(com.branding.logo_url)?apiKey=1p7pfT07fHfgmupzsl4vHGteG2tEZMh7" /></td>
                <td>@com.ticker</td>
                <td>@com.name</td>
                <td>@com.locale</td>
                <td><button @onclick="@(()=>Delete(com.ticker))">DELETE</button></td>
            </tr>
        }
    </tbody>
</table>

<style>
    img {
        width: 100px;
        aspect-ratio: 1/1;
    }

    tr th {
        border: 1px solid black;
        padding: 10px 20px;
        text-align: center;
    }

    tr th {
        cursor: pointer;
    }

    tr td {
        border: 1px solid black;
        padding: 10px 20px;
        text-align: center;
    }
</style>

@code {
    public string API_KEY = "1p7pfT07fHfgmupzsl4vHGteG2tEZMh7";
    public List<CompanyDetailed> companies { get; set; } = new List<CompanyDetailed>();

    private KeyValuePair<string, bool> ColumnSort { get; set; } = new KeyValuePair<string, bool>("", false);

    protected override async Task OnInitializedAsync()
    {
        companies = await StockService.GetWatchList(AccountService.User.id);
    }

    private void Sort(string sortColumn)
    {
        if (ColumnSort.Key != sortColumn)
        {
            ColumnSort = new KeyValuePair<string, bool>(sortColumn, false);
        }
        else
        {
            ColumnSort = new KeyValuePair<string, bool>(sortColumn, !ColumnSort.Value);
        }
        if (ColumnSort.Value)
        {
            SortDesc(sortColumn);
        }
        else
        {
            SortAsc(sortColumn);
        }
    }

    private void SortDesc(string sortColumn)
    {
        companies = companies.OrderByDescending(e => e.GetType().GetProperty(sortColumn).GetValue(e, null)).ToList();
    }

    private void SortAsc(string sortColumn)
    {
        companies = companies.OrderBy(e => e.GetType().GetProperty(sortColumn).GetValue(e, null)).ToList();
    }

    private async Task Delete(string ticker)
    {
        await StockService.Delete(AccountService.User.id, ticker);
        NavigationManager.NavigateTo("/user/watchlist", true);
    }
}
